generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum Role {
  admin
  user
}

enum Gender {
  men
  women
  kid
  unisex
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  // Relaciones 
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([gender])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String
  role          Role         @default(user)
  image         String?
  userAddress   UserAddress?
  Order         Order[]
}

model Province {
  id           String         @id // üîÅ quit√°s @default(uuid()) para poder usar tus c√≥digos
  name         String         @unique
  cities       City[]
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model City {
  id          String        @id @default(uuid())
  name        String
  province    Province      @relation(fields: [provinceId], references: [id])
  provinceId  String
  UserAddress UserAddress[]

  @@unique([name, provinceId])
}

model UserAddress {
  id         String @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String
  postalCode String
  phone      String

  // Relaciones
  province   Province @relation(fields: [provinceId], references: [id])
  provinceId String

  city   City   @relation(fields: [cityId], references: [id])
  cityId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// ORDEN DE COMPRAS 
model Order {
  id           String    @id @default(uuid())
  subtotal     Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean
  delivered    DateTime?
  paidAt       DateTime?

  createdAt DateTime @default(now())
  // Cada vez que se actualiza tiene el nuevo valor de la actualizacion 
  updateAt  DateTime @updatedAt

  // Relaciones
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  OrderItem OrderItem[]
}

model OrderItem {
  id       String @id @default(ulid())
  quantity Int
  price    Float
  size     Size

  // Relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  producto  Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  is         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  cityId     String

  province   Province @relation(fields: [provinceId], references: [id])
  provinceId String
}
